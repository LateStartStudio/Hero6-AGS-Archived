// Main script for module 'Stats'

int temp_str = 0;
int temp_int = 0;
int temp_agi = 0;
int temp_vit = 0;
int temp_luck = 0;
int temp_weaponuse = 0;
int temp_parry = 0;
int temp_dodge = 0;
int temp_throw = 0;
int temp_climb = 0;
int temp_stealth = 0;
int temp_lockpick = 0;
int temp_magic = 0;

short allocate = 30;
export allocate;

function InitializeClasses() {
  fighterData.str = 20;
  fighterData.Int = 10;
  fighterData.agi = 25;
  fighterData.vit = 20;
  fighterData.luck = 20;
  fighterData.comm = 5;
  fighterData.honor = 10;
  fighterData.magic = 0;
  fighterData.weaponuse = 30;
  fighterData.parry = 30;
  fighterData.dodge = 30;
  fighterData.throw = 10;
  fighterData.climb = 0;
  fighterData.stealth = 0;
  fighterData.lockpick = 0;
  
  mageData.str = 10;
  mageData.Int = 25;
  mageData.agi = 25;
  mageData.vit = 10;
  mageData.luck = 20;
  mageData.comm = 15;
  mageData.honor = 5;
  mageData.magic = 20;
  mageData.weaponuse = 20;
  mageData.parry = 0;
  mageData.dodge = 20;
  mageData.throw = 0;
  mageData.climb = 0;
  mageData.stealth = 0;
  mageData.lockpick = 0;
  
  thiefData.str = 10;
  thiefData.Int = 15;
  thiefData.agi = 35;
  thiefData.vit = 15;
  thiefData.luck = 30;
  thiefData.comm = 15;
  thiefData.honor = 5;
  thiefData.magic = 0;
  thiefData.weaponuse = 20;
  thiefData.parry = 0;
  thiefData.dodge = 20;
  thiefData.throw = 15;
  thiefData.climb = 10;
  thiefData.stealth = 10;
  thiefData.lockpick = 10;
}

function IncreaseStengthStat(int val) {
  
  temp_str = temp_str + val;
  if (temp_str >= heroinfo.str) {
    heroinfo.str = heroinfo.str + 1;
    temp_str = temp_str - heroinfo.str;
    lblStr.TextColor = 14;
  }
  RefreshMaxHealthStat();
}

function IncreaseIntelligenceStat(int val) {
  
  if (heroinfo.Int==0) return;

  temp_int = temp_int + val;
  if (temp_int >= heroinfo.Int) {
    heroinfo.Int = heroinfo.Int + 1;
    temp_int = temp_int - heroinfo.Int;
    lblInt.TextColor = 14;
  }
  RefreshMaxMagicStat();
}

function IncreaseAgilityStat(int val) {
  
  temp_agi = temp_agi + val;
  if (temp_agi >= heroinfo.agi) {
    heroinfo.agi = heroinfo.agi + 1;
    temp_agi = temp_agi - heroinfo.agi;
    lblAgi.TextColor = 14;
  }
  RefreshMaxStaminaStat();
}

function IncreaseVitalityStat(int val) {
  
  temp_vit = temp_vit + val;
  if (temp_vit >= heroinfo.vit) {
    heroinfo.vit = heroinfo.vit + 1;
    temp_vit = temp_vit - heroinfo.vit;
    lblVit.TextColor = 14;
  }
  RefreshMaxHealthStat();
  RefreshMaxStaminaStat();
}

function IncreaseLuckStat(int val) {
  
  temp_luck = temp_luck + val;
  if (temp_luck >= heroinfo.luck) {
    heroinfo.luck++;
    temp_luck = temp_luck - heroinfo.luck;
    lblLuck.TextColor = 14;
  }
}

function IncreaseWeaponUseStat(int val) {
  
  temp_weaponuse = temp_weaponuse + val;
  if (temp_weaponuse >= heroinfo.weaponuse) {
    heroinfo.weaponuse++;
    temp_weaponuse = temp_weaponuse - heroinfo.weaponuse;
    lblWeaponUse.TextColor = 14;
  }
}

function IncreaseParryStat(int val) {
  
  temp_parry = temp_parry + val;
  if (temp_parry >= heroinfo.parry) {
    heroinfo.parry++;
    temp_parry = temp_parry - heroinfo.parry;
    lblParry.TextColor = 14;
  }
}

function IncreaseDodgeStat(int val) {
 
  temp_dodge = temp_dodge + val;
  if (temp_dodge >= heroinfo.dodge) {
    heroinfo.dodge++;
    temp_dodge = temp_dodge - heroinfo.dodge;
    lblDodge.TextColor = 14;
  }
}

function IncreaseThrowStat(int val) {
 
  temp_throw = temp_throw + val;
  if (temp_throw >= heroinfo.throw) {
    heroinfo.throw++;
    temp_throw = temp_throw - heroinfo.throw;
    lblThrow.TextColor = 14;
  }
}

function IncreaseClimbStat(int val) {
 
  temp_climb = temp_climb + val;
  if (temp_climb >= heroinfo.climb) {
    heroinfo.climb++;
    temp_climb = temp_climb - heroinfo.climb;
    lblClimb.TextColor = 14;
  }
}

function IncreaseStealthStat(int val) {
 
  temp_stealth = temp_stealth + val;
  if (temp_stealth >= heroinfo.stealth) {
    heroinfo.stealth++;
    temp_stealth = temp_stealth - heroinfo.stealth;
    lblStealth.TextColor = 14;
  }
}

function IncreaseLockpickStat(int val) {
 
  temp_lockpick = temp_lockpick + val;
  if (temp_lockpick >= heroinfo.lockpick) {
    heroinfo.lockpick++;
    temp_lockpick = temp_lockpick - heroinfo.lockpick;
    lblLock.TextColor = 14;
  }
}

function IncreaseMagicStat(int val) {
 
  temp_magic = temp_magic + val;
  if (temp_magic >= heroinfo.magic) {
    heroinfo.magic++;
    temp_magic = temp_magic - heroinfo.magic;
    lblMagic.TextColor = 14;
  }
  RefreshMaxMagicStat();
}

function HandleCharacter() {
  // This function will update character's status every 1/2 game minute ... 1500 ticks
  //if (GetTickCount() - heroinfo.status_lastupdate < heroinfo.status_interval) then return end
  //heroinfo.status_lastupdate = GetTickCount()
  
  
	//if (IsTimerExpired(10) == 0) return;
	//Display("hi");
  
  if (heroinfo.status==STATUS_HEALTHY) {
  	if (heroinfo.hp!=heroinfo.mhp) {
		// refresh hp TODO: tweak values
		  heroinfo.hp = minInt(heroinfo.mhp, heroinfo.hp + (2 + heroinfo.vit/20 + heroinfo.str/30)/120);
		}
		if (heroinfo.mp!=heroinfo.mmp) {
			// refresh mp
			heroinfo.mp = minInt(heroinfo.mmp, heroinfo.mp + (2 + heroinfo.magic/20 + heroinfo.Int/30)/120);
		}
		if (heroinfo.sp!=heroinfo.msp) {
			// refresh sp TODO this is 30 times more than AnonT's suggestion. (his was too slow for combat)
			heroinfo.sp = minInt(heroinfo.msp, heroinfo.sp + (5 + heroinfo.vit/10 + heroinfo.agi/25 + heroinfo.str/30)/8);
		}
  }
}
function HandleCharacter2() {
  
  // New AGS design by deltamatrix
  if (heroinfo.status==STATUS_HEALTHY) {
    //Display("healhy");
		  // refresh hp 
		  if (IsTimerExpired(4) == 1) {
		    heroinfo.hp = minInt(heroinfo.hp + 1,heroinfo.mhp);
		    SetTimer(4, 3600);
		  }
		  // refresh sp
		  if (IsTimerExpired(5) == 1) {
		    // if running:
		    if (!runningMode) heroinfo.sp = minInt(heroinfo.sp + 1,heroinfo.msp);
		    else {
					heroinfo.sp = minInt(heroinfo.sp - 1,heroinfo.msp);
					IncreaseAgilityStat(Random(4));
				}
		    // handle stealth increase here:
		    if (sneakingMode) {
					if (cEgo.Moving) {
					  IncreaseStealthStat(Random(FloatToInt(15.0 * min(0.1,regionNoise))));
					}
				}
			
		    SetTimer(5, 400);
		  }
		  if (IsTimerExpired(6) == 1 && heroinfo.magic > 0) {
		    heroinfo.mp = minInt(heroinfo.mp + 1,heroinfo.mmp);
		    SetTimer(6, 3600);
		  }
  }
}

function Update_stats() {
  //mouse.UseModeGraphic(eModePointer);
  lblStr.Text = String.Format("%d", heroinfo.str);
  lblInt.Text = String.Format("%d", heroinfo.Int);
  lblAgi.Text = String.Format("%d", heroinfo.agi);
  lblVit.Text = String.Format("%d", heroinfo.vit);
  lblLuck.Text = String.Format("%d", heroinfo.luck);
  lblMagic.Text = String.Format("%d", heroinfo.magic);
  lblWeaponUse.Text = String.Format("%d", heroinfo.weaponuse);
  lblParry.Text = String.Format("%d", heroinfo.parry);
  lblDodge.Text = String.Format("%d", heroinfo.dodge);
  lblThrow.Text = String.Format("%d", heroinfo.throw);
  lblClimb.Text = String.Format("%d", heroinfo.climb);
  lblStealth.Text = String.Format("%d", heroinfo.stealth);
  lblLock.Text = String.Format("%d", heroinfo.lockpick);
  
  lblAllocate.Text = String.Format("%d", allocate);
  lblCharHealth.Text = String.Format("Health:%d/%d", heroinfo.hp, heroinfo.mhp);
  lblCharStamina.Text = String.Format("Stamina:%d/%d", heroinfo.sp, heroinfo.msp);
  lblCharMagic.Text = String.Format("Magic:%d/%d", heroinfo.mp, heroinfo.mmp);
  
  if (heroinfo.class == CLASS_FIGHTER) imgClass.NormalGraphic = 1570;
  else if (heroinfo.class == CLASS_MAGE) imgClass.NormalGraphic = 1571;
  else if (heroinfo.class == CLASS_THIEF) imgClass.NormalGraphic = 1572;
}

/**
* Init function for Fighter stats, set all stats to starter values. Was originally 
* a room function, but was split out to avoid duplicate code.
*
* @author Per Olav Flaten / Unknown
*/
function setInitialFighterStats()
{
  heroinfo.class = CLASS_FIGHTER;
  heroinfo.str = fighterData.str;
  heroinfo.Int = fighterData.Int;
  heroinfo.agi = fighterData.agi;
  heroinfo.vit = fighterData.vit;
  heroinfo.luck = fighterData.luck;
  heroinfo.comm = fighterData.comm;
  heroinfo.honor = fighterData.honor;
  heroinfo.magic = fighterData.magic;
  heroinfo.weaponuse = fighterData.weaponuse;
  heroinfo.parry = fighterData.parry;
  heroinfo.dodge = fighterData.dodge;
  heroinfo.throw = fighterData.throw;
  heroinfo.climb = fighterData.climb;
  heroinfo.stealth = fighterData.stealth;
  heroinfo.lockpick = fighterData.lockpick;
}

/**
* Init function for Mage stats, set all stats to starter values. Was originally 
* a room function, but was split out to avoid duplicate code.
*
* @author Per Olav Flaten / Unknown
*/
function setInitialMageStats()
{
  heroinfo.class = CLASS_MAGE;
  heroinfo.str = mageData.str;
  heroinfo.Int = mageData.Int;
  heroinfo.agi = mageData.agi;
  heroinfo.vit = mageData.vit;
  heroinfo.luck = mageData.luck;
  heroinfo.comm = mageData.comm;
  heroinfo.honor = mageData.honor;
  heroinfo.magic = mageData.magic;
  heroinfo.weaponuse = mageData.weaponuse;
  heroinfo.parry = mageData.parry;
  heroinfo.dodge = mageData.dodge;
  heroinfo.throw = mageData.throw;
  heroinfo.climb = mageData.climb;
  heroinfo.stealth = mageData.stealth;
  heroinfo.lockpick = mageData.lockpick;
}

/**
* Init function for Thief stats, set all stats to starter values. Was originally 
* a room function, but was split out to avoid duplicate code.
*
* @author Per Olav Flaten / Unknown
*/
function setInitialThiefStats()
{
  heroinfo.class = CLASS_THIEF;
  heroinfo.str = thiefData.str;
  heroinfo.Int = thiefData.Int;
  heroinfo.agi = thiefData.agi;
  heroinfo.vit = thiefData.vit;
  heroinfo.luck = thiefData.luck;
  heroinfo.comm = thiefData.comm;
  heroinfo.honor = thiefData.honor;
  heroinfo.magic = thiefData.magic;
  heroinfo.weaponuse = thiefData.weaponuse;
  heroinfo.parry = thiefData.parry;
  heroinfo.dodge = thiefData.dodge;
  heroinfo.throw = thiefData.throw;
  heroinfo.climb = thiefData.climb;
  heroinfo.stealth = thiefData.stealth;
  heroinfo.lockpick = thiefData.lockpick;
}

/**
* Recalculates and refreshes all pool stats(HP, Stamina and MP).
*
* @author Per Olav Flaten
*/
function refreshPoolStats()
{
  RefreshMaxHealthStat();
	RefreshMaxStaminaStat();
	RefreshMaxMagicStat();
	SetMaxHealth();
	SetMaxStamina();
	SetMaxMagic();
  Update_stats();
}  

/**
* Sets all stats of respective classes back to their default value, 
* as well as refresh the Pool stats(HP, Stamina and MP) and following GUI labels.
*
* @author Per Olav Flaten
*/
function setInitialClassStats(short class)
{
  if(class == CLASS_FIGHTER) setInitialFighterStats();
  else if(class == CLASS_MAGE) setInitialMageStats();
  else if(class == CLASS_THIEF) setInitialThiefStats();
  else Display("Bug occured at function setInitialClassStats()");

  refreshPoolStats();
}


function DecreaseHealth(short val) {
	heroinfo.hp -= val;

	if (heroinfo.hp <= 0) {
		heroinfo.hp = 0;
		//heroinfo.hp = heroinfo.mhp;
	}
}  

function DecreaseStamina(short val) {
  if (heroinfo.sp > 0) { //the hero has positive SP before the reduction	
    heroinfo.sp -= val;

    if (heroinfo.sp <= 0) {  // the hero now has negative SP
      Display("The slightest physical effort causes your body great pain. You need rest now.");
      // charge overused stamina to health
      DecreaseHealth( abs(heroinfo.sp) / 2);  //2 SP lost == 1 HP lost
      heroinfo.sp = 0;
    }
  } else { //the hero already has 0 SP    
    DecreaseHealth( val / 2);
  }
}