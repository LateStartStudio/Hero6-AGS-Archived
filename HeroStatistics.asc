
HeroStatistics heroStatisticsBuffer; // Buffer to calculate stat increase

function HeroStatistics::setHealthStaminaMagicPointsToMax() {
  this.currentHealthPoints  = this.maxHealthPoints;
  this.currentStaminaPoints = this.maxStaminaPoints;
  this.currentMagicPoints   = this.maxMagicPoints;
}

function HeroStatistics::calculateMaxHealthStaminaAndMagic() {
  this.maxHealthPoints  = ceiling(((IntToFloat(this.stats[Stats_Strength]) * 0.4) + (IntToFloat(this.stats[Stats_Vitality]) * 0.6)) * 2.0);
  this.maxStaminaPoints = ceiling(((IntToFloat(this.stats[Stats_Agility])  * 0.6) + (IntToFloat(this.stats[Stats_Vitality]) * 0.4)) * 2.0);
  if(this.stats[Stats_Magic] > 0)
    this.maxMagicPoints = ceiling(((IntToFloat(this.stats[Stats_Intelligence]) * 0.4) + (IntToFloat(this.stats[Stats_Magic]) * 0.6)) * 2.0);
}

/**
 * Modify health/stamina/magic points or honor stat. Input argument will increase or decrease health/stamina/magic points.
 *
 * @param value - Positive number value determines increase. Negative number value determines decrease.
 */
function HeroStatistics::modifyHealthPoints (short value) {
  this.currentHealthPoints += value;
  if(this.currentHealthPoints <= 0)
    this.currentHealthPoints = 0;
}
function HeroStatistics::modifyStaminaPoints (short value) {
  if(value < 0) { // Decrease
    if(this.currentStaminaPoints > 0) { // The hero has positive SP before the reduction
      this.currentStaminaPoints += value;
      if(this.currentStaminaPoints <= 0) { // The hero now has negative SP
        Display("The slightest physical effort causes your body great pain. You need rest now.");
        this.modifyHealthPoints(-(abs(this.currentStaminaPoints) / 2)); // 2 SP lost == 1 HP lost
        this.currentStaminaPoints = 0;
      }
    } else { // The hero already has 0 SP
      this.modifyHealthPoints(value / 2); // 2 SP lost == 1 HP lost
    }
  } else { // Increase
    this.currentStaminaPoints += value;
  }
}
function HeroStatistics::modifyMagicPoints (short value) { this.currentMagicPoints   += value; }
function HeroStatistics::modifyHonour      (short value) { this.honour += value;               }

/**
 * increaseStat
 * Buffers a value, and increment the stat when the buffer is greater or equal than the stat. 
 * On stat increment the buffer is set to the difference of the buffer and the stat, divided
 * by 2, as points that carry over to the next level should have less weigth.
 * For example, if an action has a input value of 10, and the stat is set to 30, the action 
 * should be repeated 3 times before the stat increases. Assuming the buffer is set to 0 on start.
 *
 * @param stat  - Which stat to increase. See enum Stats
 * @param value - Value to put in buffer.
 */
function HeroStatistics::increaseStat (int stat, short value) {
	if (this.stats[stat] >= 100)
		return;
		
  heroStatisticsBuffer.stats[stat] += value;
  if(heroStatisticsBuffer.stats[stat] >= this.stats[stat]) {
    this.stats[stat]++;
    heroStatisticsBuffer.stats[stat] = (heroStatisticsBuffer.stats[stat] - this.stats[stat]) / 2;
  }
}

/**
 * For debugging.
 */
function HeroStatistics::setMaxStats () {
	int i = 0;
	while (i < STATS_LENGTH) {
		this.stats[i] = 100;
		i++;
	}
	this.honour = 100;
}

/**
 * Code in repeatedly_execute depends on hero stats. All important values are set with a value 1 to avoid division by zero error.
 */
function HeroStatistics::InitializeTempValues() {  
  this.currentHealthPoints  = 1;
  this.maxHealthPoints      = 1;
  this.currentStaminaPoints = 1;
  this.maxStaminaPoints     = 1;
}

// Entry point
HeroStatistics heroStatistics;
export heroStatistics;

function game_start() {
  heroStatistics.InitializeTempValues();
}
