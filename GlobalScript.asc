
#define DEFAULT_GAMESPEED 40

/**
 * Called when the game starts, before the first room is loaded
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function game_start() {
	SetRestartPoint ();
	Display("Hero6 is a fan-made game.  Thank you to all the heroes who made it possible to continue the quest.");

	initCombatModule(); // init combat module

	InitializeGrid();	// init combat grid

	gStats.Visible = false;
	gMonsterbox.Visible = false;
	gCombatbox.Visible = false;
	gCombatgui.Visible = false;
	gNoisemeter.Visible = false;

	cCriticaltext.Transparency = 100;
	cCriticaltext.Baseline = 240;
	cHeroshad.Transparency = 50;
	cRainCloud.Transparency = 100;

	flags.DayTheMagicShopReopens = 32767; // initialize certain quest variables

	cFilter.Transparency = 0;

	cFilter.Baseline = 300;

	SetGameSpeed(DEFAULT_GAMESPEED);

	aMusic2.Play(); // Intro music
}

/**
 * Add code that should always run on every game frame here. This will run even if the game is in blocking mode.
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function repeatedly_execute_always() { }

/**
 * Run every game frame by AGS, except when in blocking state (cutscene, etc)
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function repeatedly_execute() {
	if (isInRunningMode() && cEgo.Moving && IsTimerExpired(Timer_Running)) {
		heroStatistics.modifyStaminaPoints(-2);
		SetTimer(Timer_Running, 200);
	}

	if (!isHeroInCombat() && heroStatistics.currentHealthPoints <= 0)
		GameOverDialog("Tired?", "Say, when was the last time you sat down to breathe, Hero?", false);

	updateCombat();

	updateSpells(); // flame dart cast
}

/**
 * Only function that may be used in AGS dialog scripts. Perform any needed advanced dialog scripting
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function dialog_request(int X) {}

/**
 * Displays random msg when player clicks in a object without interactions
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function unhandled_event(int what, int type) {
	int rand = 0;

	if (what == 4 && type == 1 || what == 1 && type == 1) { // look
		Display("You see nothing of interest");
	}

	if (what == 4 && type == 2 || what == 1 && type == 2) { // interact
		rand = Random(3);
	if (rand == 0)
		Display("That is no place for your hand");
	else if (rand == 1)
		Display("You'd better not.");
	else if (rand == 2)
		Display("That wont help.");
	else if (rand == 3)
		Display("What are you trying to do?");
	}

	if (what == 4 && type == 3 || what == 1 && type == 3) {
		rand = Random(2);
	if (rand == 0)
		Display("That doesn't seem to work.");
	else if (rand == 1)
		Display("These two don't go together.");
	else if (rand == 2)
		Display("What are you trying to do?");
	}

	if (what == 4 && type == 4 || what == 1 && type == 4) {
		rand = Random(3);
	if (rand == 0)
		Display("You don't want to put that in your mouth.");
	else if (rand == 1)
		Display("It doesn't say much.");
	else if (rand == 2)
		Display("There is no response.");
	else if (rand == 3)
		Display("Who are you trying to talk to?");
	}

	if (what == 4 && type == 9 || what == 1 && type == 9 || what == 2 && type == 9) {
		CastFetch(mouse.x, mouse.y, null);
	}  

	if (what == 3 && type == 3) {
		Display("He doesn't seem interested");
	}
}

/*
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function on_event(EventType event, int data) {
	if (event == eEventLeaveRoom) {
	if (data == 102) return;
		heroPrevX = cEgo.x;
		heroPrevY = cEgo.y;
	}

	if (event == eEventEnterRoomBeforeFadein) {
		onEnterRoom_updCombat(data);
	}
}

/**
 * Called when a key is pressed. keycode holds the key's ASCII code
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function on_key_press(int keycode) {
	if (IsGamePaused() == 1){
		if(keycode != 27) // game paused, so don't react to keypresses except for ESC
			keycode=0; 
	}
	if (keycode==17)                        QuitGame(1);                    // Ctrl-Q
	if (keycode==367)                       RestartGame();                  // F9
	if (keycode==434)                       SaveScreenShot("scrnshot.bmp"); // F12
	if (keycode==9)                         iconInv_Click();                // Tab, show inventory
	if (keycode==27   && gOptions.Visible)  gOptions.Visible = false;       // ESC
	if (keycode==433) {                                                     // F11
		cEgo.x = mouse.x;
		cEgo.y = mouse.y;
	}
}

/**
 * This function can also be made for each individual script so try that before adding code here to keep
 * GlobalScript clean
 */
function on_mouse_click(MouseButton button) { //When mouse button is clicked - either LEFT or RIGHT
	if (button == eMouseLeft) {
		if (Mouse.Mode == eModeFlameDart && cFlame.Room != cEgo.Room) // handle spells
			CastFlameDart(mouse.x, mouse.y);
	}
}

/**
 * AGS.inventory
 */
function inventory24_a        () { inv_24a();           }
function inventory32_a        () { inv_32a();           }
function inventory50_a        () { inv_50a();           }
function inventory58_a        () { inv_58a();           }
function inventory63_a        () { inv_63a();           }
function inventory64_a        () { inv_64a();           }
function inventory64_b        () { inv_64b();           }
function inventory68_a        () { inv_68a();           }
function inventory70_a        () { inv_70a();           }
function inventory72_a        () { inv_72a();           }
function inventory77_a        () { inv_77a();           }
function inventory78_a        () { inv_78a();           }
function inventory80_a        () { inv_80a();           }
function iDukeSword_Look      () { DisplayGlobalMessage(520); }
function iMagicFruit_Look     () { DisplayGlobalMessage(525); }
function iGoblinTeeth_Look    () { DisplayGlobalMessage(526); }
function iPass_Look           () { DisplayGlobalMessage(522); }
function iRemenBook_Look      () { remenBook_Look();    }
function iMPouch_Interact     () { DisplayGlobalMessage(518); }
function iFlaskNullWater_Look () { DisplayGlobalMessage(528); }
function iGNote_Look          () { gNote_Look();        }
function iTorch_UseInv        () { torch_UseInv();      }
function iFlint_UseInv        () { flint_UseInv();      }

/**
 * AGS.character
 */
function character0_a           () {}
function character0_b           () {}
function character0_c           () {}
function character0_d           () {}
function character0_e           () { chr_0e();                       }
function character2_a           () { chr_2a();                       }
function character3_a           () { GenericMonsterUse(cShadowmage); }
function character5_a           () { GenericMonsterUse(cGoblin);     }
function character12_a          () { GenericMonsterUse(cClaygolem);  }
function character13_a          () { GenericMonsterUse(cWoodgolem);  }
function character43_a          () { GenericMonsterUse(cEnemy1);     }
function character44_a          () { GenericMonsterUse(cEnemy2);     }
function character45_a          () { GenericMonsterUse(cEnemy3);     }
function character46_a          () { GenericMonsterUse(cEnemy4);     }
function character47_a          () { GenericMonsterUse(cEnemy5);     }
function character48_a          () { GenericMonsterUse(cEnemy6);     }
function character6_a           () { dllewella01.Start();            }
function character9_a           () { chr_9a();                       }
function character9_b           () { chr_9b();                       }
function character17_a          () { chr_17a();                      }
function character18_a          () { chr_18a();                      }
function character18_b          () { VeranPotionResponse();          }
function character18_c          () { VeranPotionResponse();          }
function character18_d          () { VeranPotionResponse();          }
function character18_e          () { chr_18e();                      }
function character18_f          () { chr_18f();                      }
function character19_a          () { chr_19a();                      }
function character22_a          () { chr_22a();                      }
function character23_a          () { chr_23a();                      }
function character23_b          () { chr_23b();                      }
function character23_c          () { chr_23c();                      }
function character28_a          () { chr_28a();                      }
function character28_b          () { chr_28b();                      }
function character29_a          () { chr_29a();                      }
function character36_a          () { dGlith01.Start();               }
function character36_b          () { dStoreBuy.Start();              }
function character37_a          () { chr_37a();                      }
function character42_a          () { chr_42a();                      }
function character52_a          () { chr_52a();                      }
function cEgo_Look              () { DisplayGlobalMessage(999);            }
function cEgo_Talk              () { DisplayGlobalMessage(997);            }
function cEgo_UseInv            () { ego_UseInv();                   }
function cGuard01_Look          () { DisplayGlobalMessage(500);            }
function cGuard01_Talk          () { DisplayGlobalMessage(502);            }
function cGuard01_UseInv        () { guard01_UseInv();               }
function cThaen_UseInv          () { thaen_UseInv();                 }
function cJulian_Talk           () { dialog[9].Start();              }
function cColin_Talk            () { dialog[5].Start();              }
function cVeran_UseInv          () { veran_UseInv();                 }
function cBelenus_UseInv        () { belenus_UseInv();               }
function cFernin_UseInv         () { fernin_UseInv();                }
function cGlith_UseInv          () { glith_UseInv();                 }
function cShadowmagedolm_Look   () { DisplayGlobalMessage(541);            }
function cShadowmagedolm_UseInv () { shadowMageDolm_UseInv();        }
function cRonbars_UseInv        () { ronbars_UseInv();               }
function cRoguemonster_UseInv   () { rogueMonster_UseInv();          }

/**
 * AGS.gui.spellsBtn
 */
function btnSpellPoint_Click (GUIControl *control, MouseButton button) { spellPoint_Click(); }
function btnSpellOK_Click    (GUIControl *control, MouseButton button) { spellOK_Click();    }

/**
 * AGS.gui.inventoryBtn
 */
function btnInvUp_Click     (GUIControl *control, MouseButton button) { invUp_Click();     }
function btnInvDown_Click   (GUIControl *control, MouseButton button) { invDown_Click();   }
function btnInvOK_Click     (GUIControl *control, MouseButton button) { invOK_Click();     }
function btnInvSelect_Click (GUIControl *control, MouseButton button) { invSelect_Click(); }

/**
 * AGS.gui.iconBtn
 */
function btnIconWalk_Click     (GUIControl *control, MouseButton button) { iconWalk_Click();     }
function btnIconLook_Click     (GUIControl *control, MouseButton button) { iconLook_Click();     }
function btnIconInteract_Click (GUIControl *control, MouseButton button) { iconInteract_Click(); }
function btnIconTalk_Click     (GUIControl *control, MouseButton button) { iconTalk_Click();     }
function btnIconStar_Click     (GUIControl *control, MouseButton button) { iconStar_Click();     }
function btnIconMagic_Click    (GUIControl *control, MouseButton button) { iconMagic_Click();    }
function btnIconCurInv_Click   (GUIControl *control, MouseButton button) { iconCurInv_Click();   }
function btnIconInv_Click      (GUIControl *control, MouseButton button) { iconInv_Click();      }
function btnOptions_Click      (GUIControl *control, MouseButton button) { options_Click();      }

/**
 * AGS.gui.combatBtn
 */
function btnThrust_Click  (GUIControl *control, MouseButton button) { thrust_Click();  }
function btnSlash_Click   (GUIControl *control, MouseButton button) { slash_Click();   }
function btnSlice_Click   (GUIControl *control, MouseButton button) { slice_Click();   }
function btnDodge_Click   (GUIControl *control, MouseButton button) { dodge_Click();   }
function btnBlock_Click   (GUIControl *control, MouseButton button) { block_Click();   }
function btnRunAway_Click (GUIControl *control, MouseButton button) { runAway_Click(); }
function btnFlame_Click   (GUIControl *control, MouseButton button) { flame_Click();   }

/**
 * AGS.gui.setStatsBtn
 */
function btnAddStr_Click       (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Strength);     }
function btnAddInt_Click       (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Intelligence); }
function btnAddAgi_Click       (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Agility);      }
function btnAddVit_Click       (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Vitality);     }
function btnAddLuck_Click      (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Luck);         }
function btnAddMagic_Click     (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Magic);        }
function btnAddWeaponUse_Click (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_WeaponUse);    }
function btnAddParry_Click     (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Parry);        }
function btnAddDodge_Click     (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Dodge);        }
function btnAddThrow_Click     (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Throwing);     }
function btnAddClimb_Click     (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Climbing);     }
function btnAddStealth_Click   (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_Stealth);      }
function btnAddLock_Click      (GUIControl *control, MouseButton button) { increaseStat_Click(Stats_LockPicking);  }
function btnSubStr_Click       (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Strength);     }
function btnSubInt_Click       (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Intelligence); }
function btnSubAgi_Click       (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Agility);      }
function btnSubVit_Click       (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Vitality);     }
function btnSubLuck_Click      (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Luck);         }
function btnSubMagic_Click     (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Magic);        }
function btnSubWeaponUse_Click (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_WeaponUse);    }
function btnSubParry_Click     (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Parry);        }
function btnSubDodge_Click     (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Dodge);        }
function btnSubThrow_Click     (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Throwing);     }
function btnSubClimb_Click     (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Climbing);     }
function btnSubStealth_Click   (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_Stealth);      }
function btnSubLock_Click      (GUIControl *control, MouseButton button) { decreaseStat_Click(Stats_LockPicking);  }
function btnBack_Click         (GUIControl *control, MouseButton button) { back_Click();                           }
function btnReroll_OnClick     (GUIControl *control, MouseButton button) { reroll_Click();                         }
function btnStart_Click        (GUIControl *control, MouseButton button) { start_Click();                          }

/**
 * AGS.gui.submenuBtn
 */
function btnViewCharSheet_Click (GUIControl *control, MouseButton button) { viewCharSheet_Click(); }
function btnSubClose_Click      (GUIControl *control, MouseButton button) { subClose_Click();      }
function btnTime_Click          (GUIControl *control, MouseButton button) { time_Click();          }
function btnSneak_Click         (GUIControl *control, MouseButton button) { sneak_Click();         }
function btnRun_Click           (GUIControl *control, MouseButton button) { run_Click();           }
function btnRest10mins_Click    (GUIControl *control, MouseButton button) { rest10mins_Click();    }
function btnRest30mins_Click    (GUIControl *control, MouseButton button) { rest30mins_Click();    }
function btnRest60mins_Click    (GUIControl *control, MouseButton button) { rest60mins_Click();    }
function btnRestCancel_Click    (GUIControl *control, MouseButton button) { restCancel_Click();    }
function btnRest_Click          (GUIControl *control, MouseButton button) { rest_Click();          }
function btnRestSleep_Click     (GUIControl *control, MouseButton button) { restSleep_Click();     }

/**
 * AGS.gui.optionsBtn
 */
function btnSaveGame_Click         (GUIControl *control, MouseButton button) { saveGame_Click();         }
function btnLoadGame_Click         (GUIControl *control, MouseButton button) { loadGame_Click();         }
function btnRestartGame_Click      (GUIControl *control, MouseButton button) { restartGame_Click();      }
function btnQuitGame_Click         (GUIControl *control, MouseButton button) { quitGame_Click();         }
function BtnReturn_Click           (GUIControl *control, MouseButton button) { return_Click();           }
function btnGameSpeedSlider_Change (GUIControl *control)                     { gameSpeedSlider_Change(); }
function btnSliderVolume_Change    (GUIControl *control)                     { sliderVolume_Change();    }
function btnSliderDetail_Change    (GUIControl *control)                     { sliderDetail_Change();    }

/**
 * AGS.gui.Nameselec
 */
function btnNameCancel_Click (GUIControl *control, MouseButton button) { nameCancel_Click(); }
function btnNameOK_Click     (GUIControl *control, MouseButton button) { nameOK_Click();     }
function txtName_OnActivate  (GUIControl *control)                     { nameOK_Click();     }

/**
 * AGS.gui.Gameover
 */
function btnGQuit_Click     (GUIControl *control, MouseButton button) { gQuit_Click();     }
function btnGRestart_Click  (GUIControl *control, MouseButton button) { gRestart_Click();  }
function btnGRestore_Click  (GUIControl *control, MouseButton button) { gRestore_Click();  }
function btnGTryAgain_Click (GUIControl *control, MouseButton button) { gTryAgain_Click(); }

/**
 * AGS.gui.JobBoard
 */
function btnJobBoardClose_Click (GUIControl *control, MouseButton button) { jobBoardClose_Click(); }
function btnJobPoster1_Click    (GUIControl *control, MouseButton button) { jobPoster1_Click();    }

/**
 * AGS.gui.Book
 */
function btnBookClose_Click             (GUIControl *control, MouseButton button) { bookClose_Click();                       }
function btnBookLeft_Click              (GUIControl *control, MouseButton button) { bookLeft_Click();                        }
function btnBookRight_Click             (GUIControl *control, MouseButton button) { bookRight_Click();                       }
function btnRiddleOK_Click              (GUIControl *control, MouseButton button) { riddleOK_Click();                        }
function btnCancelSaveLoadGame_OnClick  (GUIControl *control, MouseButton button) { cancelSaveLoadGame_OnClick();            }
function btnSave_OnClick                (GUIControl *control, MouseButton button) { save_OnClick(control, button);           }
function lstSaveGames_OnSelectionChange (GUIControl *control)                     { saveGames_OnSelectionChange(control);    }
function btnDeleteSaveGame_OnClick      (GUIControl *control, MouseButton button) { deleteSaveGame_OnClick(control, button); }
function btnLoad_OnClick                (GUIControl *control, MouseButton button) { load_OnClick(control, button);           }

/**
 * AGS.gui.SetTime
 */
function btnAcceptSetTime_OnClick(GUIControl *control, MouseButton button) { acceptSetTime_OnClick(); }

/**
 * AGS.gui.DebugUtility
 */
function btnAllInventory_OnClick      (GUIControl *control, MouseButton button) { agsDebug_OnClick(0, 0);      }
function btnDisplayVersion_OnClick    (GUIControl *control, MouseButton button) { agsDebug_OnClick(1, 0);      }
function btnWalkable_OnClick          (GUIControl *control, MouseButton button) { agsDebug_OnClick(2, 0);      }
function btnTeleport_OnClick          (GUIControl *control, MouseButton button) { agsDebug_OnClick(3, 0);      }
function btnShowFPS_OnClick           (GUIControl *control, MouseButton button) { agsDebug_OnClick(4, 1);      }
function btnHeal_OnClick              (GUIControl *control, MouseButton button) { heal_OnClick();              }
function btnMaxStats_OnClick          (GUIControl *control, MouseButton button) { maxStats_OnClick();          }
function btnAdjustStats_OnClick       (GUIControl *control, MouseButton button) { adjustStats_OnClick();       }
function btnGiveGold_OnClick          (GUIControl *control, MouseButton button) { giveGold_OnClick();          }
function btnWarpToDarkForest_OnClick  (GUIControl *control, MouseButton button) { warpToDarkForest_OnClick();  }
function btnWarpToTower_OnClick       (GUIControl *control, MouseButton button) { warpToTower_OnClick();       }
function btnWarpToGreenleaf_OnClick   (GUIControl *control, MouseButton button) { warpToGreenleaf_OnClick();   }
function btnWarpToAlbion_OnClick      (GUIControl *control, MouseButton button) { warpToAlbion_OnClick();      }
function btnWarpToCaves_OnClick       (GUIControl *control, MouseButton button) { warpToCaves_OnClick();       }
function btnWarpToEloiaStatue_OnClick (GUIControl *control, MouseButton button) { warpToEloiaStatue_OnClick(); }
function btnWarpToBerryDuel_OnClick   (GUIControl *control, MouseButton button) { warpToBerryDuel_OnClick();   }
function btnDolmenA_OnClick           (GUIControl *control, MouseButton button) { dolmenA_OnClick();           }
function btnDolmenB_OnClick           (GUIControl *control, MouseButton button) { dolmenB_OnClick();           }
function btnChapter1Select_OnClick    (GUIControl *control, MouseButton button) { chapter1Select_OnClick();    }
function btnChapter2Select_OnClick    (GUIControl *control, MouseButton button) { chapter2Select_OnClick();    }
function btnChapter3Select_OnClick    (GUIControl *control, MouseButton button) { chapter3Select_OnClick();    }
function btnSetTime_OnClick           (GUIControl *control, MouseButton button) { setTime_OnClick();           }
