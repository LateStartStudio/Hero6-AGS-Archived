/* Room Functions */
climbStruct myClimb;
/*function climbLibrary(){
  if(heroinfo.climb >= 40){
    if(cEgo.y > 91){ //Climb up
      cEgo.Walk(231, 136, eBlock, eWalkableAreas);
    
      cEgo.Move(232, 87, eBlock, eAnywhere);
      cEgo.Move(208, 86, eBlock, eAnywhere);
      
      cEgo.LockView(HERO_CLIMB);
      cEgo.Baseline = 147;
      cEgo.Walk(255, 87, eBlock, eWalkableAreas);
      cEgo.Walk(263, 84, eBlock, eAnywhere);
      
      cEgo.LockView(HEROVIEW);
      cEgo.Baseline = 0;
      cEgo.UnlockView();
    }
    else if(((cEgo.x > 210) && (cEgo.y < 91))){  //Climb Down
      cEgo.Walk(262, 85, eBlock, eWalkableAreas);
      cEgo.LockView(HERO_CLIMB);
      cEgo.Baseline = 147;
      cEgo.Walk(254, 87, eBlock, eAnywhere);
      
      cEgo.Walk(239, 90, eBlock, eWalkableAreas);      
      cEgo.Walk(208, 87, eBlock, eWalkableAreas);
      cEgo.Baseline = 0;
      cEgo.Move(232, 87, eBlock, eAnywhere);
      cEgo.Move(232, 136, eBlock, eAnywhere);
      
      cEgo.LockView(HEROVIEW);
      cEgo.Walk(180, 153, eBlock, eWalkableAreas);
      cEgo.UnlockView();
    }
  }
  else
    Display("You're not sure you are skilled enough to make the climb.");
}*/

/* Events */
function postFade() {  //Player enters room (after fadein)  
  if ((flags.Chapter > 0) && (flags.MobOccuring != 1)) 
    PlayMusic(10);

  if (cEgo.PreviousRoom == 9){
    cEgo.Walk(cEgo.x, 232, eBlock, eAnywhere); //Enter from south
  }
  
  if (cEgo.PreviousRoom == 18) {
    cEgo.Walk(280, 155, eBlock,eAnywhere);  //Enter from the library
  }
    
  if ((flags.Chapter == 2) && (flags.MobOccuring == 1)) {
    DisplayMessage(6);  //"You hear what sounds like a crowd gathering to the east."
    cEgo.Walk(325, cEgo.y, eBlock, eWalkableAreas); 
    cEgo.ChangeRoom(4, 3, 180);  //If this is automatic, why all the extra door code?
  }
}

function preFade(){  //Animate Fountain object
  object[0].SetView(2);
  object[0].Animate(0, 3, eRepeat, eNoBlock);
}

function firstEntry(){  
}

function onExit(){
}

function repExec(){
  /*if((cEgo.x < 187) &&(cEgo.y < 120))
    exitNorth();*/
}

function exitSouth(){
  cEgo.Walk(cEgo.x, 280, eBlock, eAnywhere);
  player.ChangeRoomAutoPosition(9);
}

function exitWest(){
}

function exitEast(){
  player.ChangeRoomAutoPosition(4);
}

function exitNorth(){
  if(cEgo.x < 200)
    player.ChangeRoom(6, player.x, 239);
  //player.ChangeRoomAutoPosition(6);
}

/* Objects */
function oCart_Look(){
  DisplayMessage(0);  //"A large food cart sits in the middle of town.  There appears to be a variety of food..."
}

function oCart_Interact(){
  DisplayMessage(1);  //"You can't steal from the cart while she's watching you."
}

function oCart_Talk(){
  DisplayMessage(2);  //"The cart can't talk, but it would be an interesting conversation if it could."
}

/* Hotspots */
function hHealerDoor_Interact() {  //Door to Healer's shop (Old bakery)
  cEgo.Walk(60, 182, eBlock, eWalkableAreas);  //Walk to door
  
  if ((flags.Chapter == 2) && (flags.MobOccuring == 1)) {
    Display("How strange, the shop appears closed and Belenus did not leave a note.  He must be nearby...");
    return;
  }
  if (isDaytime()) cEgo.ChangeRoom(34, 150, 310);
  else DisplayMessage(3);  //"The healer's is closed for the night."
}

function hLibraryDoorLower_Interact() {  //Door to Library (lower)
  cEgo.Walk(286, 149, eBlock, eWalkableAreas);  //Walk to door
  
  if ((flags.Chapter == 2) && (flags.MobOccuring == 1)) {
    Display("The library has closed early today.  You don't recall it being a holiday.");
    return;
  }
  if(isDaytime()) cEgo.ChangeRoom(18, 30, 180);  //Enter Library
  else DisplayMessage(4);  //"The library is closed for the night."
}

function hLibraryDoorUpper_Interact() {  //Door to Library (upper)
  //Implement needed for climb/lockpick of upper door at night and no climb during day
  if(cEgo.y < 94){
    cEgo.Walk(289, 84, eBlock, eWalkableAreas);  //Walk to door
    flags.UpperLibraryDoorUnlocked = true;
    if (flags.UpperLibraryDoorUnlocked) 
      cEgo.ChangeRoom(18, 18, 95);  //Enter Library
    else
      Display("Locked!");
  }
  else
    Display("Too far.");
}

function hGenStoreDoor_Interact() {  //Door to General Store
  cEgo.Walk(109, 160,eBlock,eWalkableAreas);  //Walk to door
  
  if ((flags.Chapter == 2) && (flags.MobOccuring == 1)) {
    Display("Closed during business hours?  What is Glith thinking?");
    return;
  }
  if (isDaytime()) cEgo.ChangeRoom(20, 4, 200);
  else DisplayMessage(5);  //"The general store is closed for the night."
}

function hUnknownDoor_Look(){  //Door to unknown room
  DisplayMessage(7);  //"The door appears to be sealed."
}

function hUnknownDoor_Interact(){  //Door to unknown room
  DisplayMessage(7);  //"The door appears to be sealed."
}


function hLibrary_Interact(){  //Interact with the library (climb)
  //climbLibrary();
  myClimb.totalClimbPoints = 7;
  myClimb.resetClimbTransitions(myClimb.totalClimbPoints);
  myClimb.minAttemptSkill = 20;
  myClimb.minSucceedSkill = 40;
  myClimb.fallCheckPoint = 4;
  myClimb.fallToX = 230;
  myClimb.fallToY = 165;
  myClimb.fallDamage = 5;
  myClimb.handbarClimbAnimation = false;
  myClimb.messageSkillInsufficient = "Even though you have some climbing experience, this seems far too difficult and dangerous for you to attempt. It would be better if you train some more first.";
  myClimb.messageClimbFailed  = "Despite your best efforts, you are unable to make any progress with this climb. Keep training and you'll make it!";
  myClimb.messageFall = "You lose your grip and fall painfully to the unforgiving ground, leaving you bruised and battered.";
  //set the climb point dimensions
  myClimb.x[0] = 180;
  myClimb.y[0] = 153;
  myClimb.x[1] = 231;
  myClimb.y[1] = 136;
  myClimb.x[2] = 232;
  myClimb.y[2] = 87;
  myClimb.x[3] = 208;
  myClimb.y[3] = 86;
  myClimb.x[4] = 230;
  myClimb.y[4] = 86;
  myClimb.x[5] = 255;
  myClimb.y[5] = 87;
  myClimb.x[6] = 263;
  myClimb.y[6] = 84;

  //set the transitions as needed
  myClimb.setTrUseWalkAnim(0, true);
  myClimb.setTrBaseline(2, 1);
  myClimb.setTrBaseline(3, 147);
  myClimb.setTrOnlyWalkable(3,  true);
  myClimb.setTrBaseline(4, 147);
  myClimb.setTrOnlyWalkable(4,  true);

  //do the climb
  myClimb.doClimb();
}


/*  Regions */
function rBalconyWalkOff()  {
  myClimb.reverseClimb = false;
}

function rBalconyWalkOn()  {  //when the character is on the balcony, the climb becomes reversed
  myClimb.reverseClimb = true;
}
