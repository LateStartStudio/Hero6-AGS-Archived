/*  The climbTransition struct is used when climbing between two points.
Its members are:
  1) onlyWalkableAreas: If true the character will go through "eWalkableAreas", if false he will go through "eAnywhere"
  2) useWalkAnimation: If true then the Walking animation will be used, otherwise the Climbing animation
  3) baseline:  the new baseline, used to indicate behind which objects the character is positioned
  */
struct climbTransition  {
  bool onlyWalkableAreas; 
  bool useWalkAnimation;
  int baseline;
};

// These two are declared here because AGS can't handle structs as function parameters
climbTransition climbTransitions[30];
climbTransition nextTransition;

/*A simpe function to reset the climbTransitions*/
function climbStruct::resetClimbTransitions(int totalClimbPoints)  {
  int i=0;
  while (i<totalClimbPoints)  {
    climbTransitions[i].onlyWalkableAreas = false;
    climbTransitions[i].useWalkAnimation = false;
    climbTransitions[i].baseline = 0;   
    i++;
  }
}

function climbStruct::setTrOnlyWalkable(int transitionNum,  bool newOnlyWalkable) {
  climbTransitions[transitionNum].onlyWalkableAreas = newOnlyWalkable;
}

function climbStruct::setTrUseWalkAnim(int transitionNum,  bool newUseWalkAnim)  {
  climbTransitions[transitionNum].useWalkAnimation = newUseWalkAnim;
}

function climbStruct::setTrBaseline(int transitionNum,  int newBaseline)  {
  climbTransitions[transitionNum].baseline = newBaseline;
}

/*  get the values from a specific cell of the climbTransitions array and place them in nextTransition  */
function getNextTransition(int i) {
  nextTransition.baseline = climbTransitions[i].baseline;
  nextTransition.onlyWalkableAreas = climbTransitions[i].onlyWalkableAreas;
  nextTransition.useWalkAnimation = climbTransitions[i].useWalkAnimation;
}


/****************************************************************************
  HOW TO USE THE CLIMB STRUCT AND ASSOCIATED METHODS
  a) Place the following at the start of the room script:
    climbStruct myClimb;
  b) If the climb is reversible (eg the hero can climb a wall up to a balcony and back), you need to:
    b1) Define a region at the end of the regular climb (e.g the balcony)
    b2) In the WalkOn function of the region, do this: "myClimb.reverseClimb = true;"
    b3) In the WalkOff function of the region, do this: "myClimb.reverseClimb = false;"
  c) Copy the following into the Interact function of the climbable hotspot:
    //Modify these parameters as appropriate
    myClimb.totalClimbPoints = 7;
    myClimb.resetClimbTransitions(myClimb.totalClimbPoints);
    myClimb.minAttemptSkill = 20;
    myClimb.minSucceedSkill = 40;
    myClimb.fallCheckPoint = 4;   //If 0 then the hero cannot fall, only fail to climb and stay at the start
    myClimb.fallToX = 230;    //only used when fallCheckPoint >0
    myClimb.fallToY = 165;    //same as above
    myClimb.fallDamage = 5;   //same as above
    myClimb.handbarClimbAnimation = false;
    myClimb.messageSkillInsufficient = "Even though you have some climbing experience, this seems far too difficult and dangerous for you to attempt. It would be better if you train some more first.";
    myClimb.messageClimbFailed  = "Despite your best efforts, you are unable to make any progress with this climb. Keep training and you'll make it!";
    myClimb.messageFall = "You lose your grip and fall painfully to the unforgiving ground, leaving you bruised and battered.";
    //set the climb point dimensions
    myClimb.x[0] = 50;
    myClimb.y[0] = 100;
    myClimb.x[1] = 60;
    myClimb.y[1] = 80
    etc.

    //set the transitions as needed
    myClimb.setTrUseWalkAnim(0, true);
    myClimb.setTrBaseline(2, 1);
    myClimb.setTrBaseline(3, 147);
    myClimb.setTrOnlyWalkable(3,  true);
    etc.

    //do the climb
    myClimb.doClimb();
*****************************************************************************/

function climbStruct::doClimb()  {
  int firstX; // the coordinates of the first climb point, which should be near a walking area
  int firstY;
  int nextX;
  int nextY;
  short staminaCost = (this.minSucceedSkill/20) + 4;
  int climbView;
  int counter;
  int nextIndex;
  bool foundFirstClimbPoint = false;   //set to true when we find the first point where the climb animation is used
  
  if (heroStatistics.stats[Stats_Climbing] <=0) { //check if the user has any points in the climb skill
    Display("You don't know the first thing about climbing. There is no point in even trying.");
    return;
  } else if (heroStatistics.stats[Stats_Climbing] < this.minAttemptSkill)  {
    Display(this.messageSkillInsufficient);
    return;
  }
  
  if (this.reverseClimb == true) {   // the climb will be executed in the reverse manner, from the final climb spot towards the first
    firstX = this.x[this.totalClimbPoints-1];
    firstY = this.y[this.totalClimbPoints-1];
  }
  else  {
    firstX = this.x[0];
    firstY = this.y[0];
  }

  cEgo.Walk(firstX, firstY, eBlock, eWalkableAreas);  //go to the starting climb point. Always use eWalkableAreas for this and the walk animation
  
  if (this.handbarClimbAnimation == true) {  //select which climbing animation will be used
    climbView = HERO_HANDBAR;
  }
  else  {
    climbView = HERO_CLIMB;
  }

  counter = 1;
  cEgo.Baseline = 0;
  heroStatistics.modifyStaminaPoints(-staminaCost);
  heroStatistics.increaseStat(Stats_Climbing, (this.minSucceedSkill+10) / 2); //increase the climbing skill
  while (counter < this.totalClimbPoints)
  {
    cEgo.LockView(climbView);   //we always lock the climb view at this point because it may have been unlocked during the previous transition
    if (this.reverseClimb == true) { //if we are going through the climb points in the reverse order
      nextIndex = this.totalClimbPoints - (counter+1);
      getNextTransition(this.totalClimbPoints - (counter+1));
    }
    else  {   //normal climb point order
      nextIndex = counter;
      getNextTransition(counter-1);
    }
    nextX = this.x[nextIndex];
    nextY = this.y[nextIndex];
   
    if ((nextTransition.useWalkAnimation == false) && (foundFirstClimbPoint == false) && (this.fallCheckPoint <= 0)) {
      /*We enter this block only if 
        a) There is no falling point 
        b) This is the first climbing transition
        Under these conditions, this is the location when we check the Climb skill. If the character fails, then
        he is simply unable to proceed with the climb and returns to the starting position*/
      foundFirstClimbPoint = true;
      if ((heroStatistics.stats[Stats_Climbing] + Random(5) + (heroStatistics.stats[Stats_Luck]/10) ) < this.minSucceedSkill) {
        //the hero failed the skill check
        cEgo.Animate(0, 1, eOnce, eBlock, eForwards); //play the climb animation twice in place
        cEgo.Animate(0, 1, eOnce, eBlock, eForwards);
        Display(this.messageClimbFailed);    //show the failed climb message
        cEgo.UnlockView();  //back to walking animation
        cEgo.Walk(firstX, firstY, eBlock, eAnywhere); //walk back to the first point of the climb
        return;
      }
    }
    
    if (nextTransition.useWalkAnimation == true) {  //if we have selected to use the walk animation for this transition instead of the climb one
      cEgo.UnlockView();
    }
    
    if (nextTransition.baseline > 0)  {   //we have set a new baseline for this transition
      cEgo.Baseline = nextTransition.baseline;
    }
    
    if (nextTransition.onlyWalkableAreas == true) {   // if we have elected to use only the walkable areas for this transition
      cEgo.Walk(nextX, nextY, eBlock, eWalkableAreas);
    }
    else  {
      cEgo.Walk(nextX, nextY, eBlock, eAnywhere);
    }
    
    //check if the spot we moved to is where we check the Climb skill in case the character falls
    if ((nextIndex == this.fallCheckPoint) && (this.fallCheckPoint > 0)) { 
      if ((heroStatistics.stats[Stats_Climbing] + Random(5) + (heroStatistics.stats[Stats_Luck]/10) ) < this.minSucceedSkill) {
        //the hero failed the skill check
        Display("Whoops!");
        cEgo.LockView(HERO_FALL);   //fall animation
        cEgo.Move(this.fallToX,  this.fallToY, eBlock, eAnywhere);
        cEgo.Animate(0, 1, eOnce, eBlock, eForwards);
        Display(this.messageFall);
        heroStatistics.modifyHealthPoints(-this.fallDamage);
        cEgo.LockView(HERO_GETUP);  //get up animation
        cEgo.Animate(0, 1, eOnce, eBlock, eForwards);
        cEgo.UnlockView();
        cEgo.Baseline = 0;
        return;   // climb failed, exit
      }
    }
    
    counter++;
  }
  cEgo.Baseline = 0;  //reset the baseline
  cEgo.UnlockView();  //unlock the view to return to the walking animation
}

