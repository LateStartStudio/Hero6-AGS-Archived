/*** AGS.gui.setStatsBtn   *****************************************************************************************************************/

HeroStatistics heroStatisticsBuffer; // Remeber stats from the last time this GUI was opened
short pointsToAllocate;

function initializeFighterStatistics() {
  heroStatistics.stats[Stats_Strength]     = 20;
  heroStatistics.stats[Stats_Intelligence] = 10;
  heroStatistics.stats[Stats_Agility]      = 25;
  heroStatistics.stats[Stats_Vitality]     = 20;
  heroStatistics.stats[Stats_Luck]         = 20;
  heroStatistics.stats[Stats_Magic]        = 0;  
  heroStatistics.stats[Stats_WeaponUse]    = 30;
  heroStatistics.stats[Stats_Parry]        = 30;
  heroStatistics.stats[Stats_Dodge]        = 30;
  heroStatistics.stats[Stats_Throwing]     = 10;
  heroStatistics.stats[Stats_Climbing]     = 0;
  heroStatistics.stats[Stats_Stealth]      = 0;
  heroStatistics.stats[Stats_LockPicking]  = 0;
  heroStatistics.honour                    = 10;  
}

function initializeMageStatistics() {
  heroStatistics.stats[Stats_Strength]     = 10;
  heroStatistics.stats[Stats_Intelligence] = 25;
  heroStatistics.stats[Stats_Agility]      = 25;
  heroStatistics.stats[Stats_Vitality]     = 10;
  heroStatistics.stats[Stats_Luck]         = 20;
  heroStatistics.stats[Stats_Magic]        = 20;  
  heroStatistics.stats[Stats_WeaponUse]    = 20;
  heroStatistics.stats[Stats_Parry]        = 0;
  heroStatistics.stats[Stats_Dodge]        = 20;
  heroStatistics.stats[Stats_Throwing]     = 0;
  heroStatistics.stats[Stats_Climbing]     = 0;
  heroStatistics.stats[Stats_Stealth]      = 0;
  heroStatistics.stats[Stats_LockPicking]  = 0;
  heroStatistics.honour                    = 5;
}

function initializeThiefStatistics() {
  heroStatistics.stats[Stats_Strength]     = 10;
  heroStatistics.stats[Stats_Intelligence] = 15;
  heroStatistics.stats[Stats_Agility]      = 35;
  heroStatistics.stats[Stats_Vitality]     = 15;
  heroStatistics.stats[Stats_Luck]         = 30;
  heroStatistics.stats[Stats_Magic]        = 0;    
  heroStatistics.stats[Stats_WeaponUse]    = 20;
  heroStatistics.stats[Stats_Parry]        = 0;
  heroStatistics.stats[Stats_Dodge]        = 20;
  heroStatistics.stats[Stats_Throwing]     = 15;
  heroStatistics.stats[Stats_Climbing]     = 10;
  heroStatistics.stats[Stats_Stealth]      = 10;
  heroStatistics.stats[Stats_LockPicking]  = 10;
  heroStatistics.honour                    = 5;
}

function copyStatisticsToBuffer() {
  heroStatisticsBuffer.stats[Stats_Strength]     = heroStatistics.stats[Stats_Strength];
  heroStatisticsBuffer.stats[Stats_Intelligence] = heroStatistics.stats[Stats_Intelligence];
  heroStatisticsBuffer.stats[Stats_Agility]      = heroStatistics.stats[Stats_Agility];
  heroStatisticsBuffer.stats[Stats_Vitality]     = heroStatistics.stats[Stats_Vitality];
  heroStatisticsBuffer.stats[Stats_Luck]         = heroStatistics.stats[Stats_Luck];
  heroStatisticsBuffer.stats[Stats_Magic]        = heroStatistics.stats[Stats_Magic];  
  heroStatisticsBuffer.stats[Stats_WeaponUse]    = heroStatistics.stats[Stats_WeaponUse];
  heroStatisticsBuffer.stats[Stats_Parry]        = heroStatistics.stats[Stats_Parry];
  heroStatisticsBuffer.stats[Stats_Dodge]        = heroStatistics.stats[Stats_Dodge];
  heroStatisticsBuffer.stats[Stats_Throwing]     = heroStatistics.stats[Stats_Throwing];
  heroStatisticsBuffer.stats[Stats_Climbing]     = heroStatistics.stats[Stats_Climbing];
  heroStatisticsBuffer.stats[Stats_Stealth]      = heroStatistics.stats[Stats_Stealth];
  heroStatisticsBuffer.stats[Stats_LockPicking]  = heroStatistics.stats[Stats_LockPicking];
  heroStatisticsBuffer.honour                    = heroStatistics.honour;
}

function initializeHeroStatistics(String name, short class) {
  pointsToAllocate = 30;
  
  heroStatistics.name  = name;
  heroStatistics.class = class;
  heroStatistics.gold  = 11;
  if(class == CLASS_FIGHTER) {
    initializeFighterStatistics();
    imgClass.NormalGraphic = 1570;
  } else if(class == CLASS_MAGE) {
    initializeMageStatistics();
    imgClass.NormalGraphic = 1571;
  } else if(class == CLASS_THIEF) {
    initializeThiefStatistics();
    imgClass.NormalGraphic = 1572;
  } else {
    Display("Bug occured at function initializeHeroStatistics()");
  }
  heroStatistics.setHealthStaminaMagicPointsToMax();
  copyStatisticsToBuffer();
}

function loadStatisticsToCharacterSheet() {
  lblStr.Text         = String.Format("%d", heroStatistics.stats[Stats_Strength]);
  lblInt.Text         = String.Format("%d", heroStatistics.stats[Stats_Intelligence]);
  lblAgi.Text         = String.Format("%d", heroStatistics.stats[Stats_Agility]);
  lblVit.Text         = String.Format("%d", heroStatistics.stats[Stats_Vitality]);
  lblLuck.Text        = String.Format("%d", heroStatistics.stats[Stats_Luck]);
  lblMagic.Text       = String.Format("%d", heroStatistics.stats[Stats_Magic]);  
  lblWeaponUse.Text   = String.Format("%d", heroStatistics.stats[Stats_WeaponUse]);
  lblParry.Text       = String.Format("%d", heroStatistics.stats[Stats_Parry]);
  lblDodge.Text       = String.Format("%d", heroStatistics.stats[Stats_Dodge]);
  lblThrow.Text       = String.Format("%d", heroStatistics.stats[Stats_Throwing]);
  lblClimb.Text       = String.Format("%d", heroStatistics.stats[Stats_Climbing]);
  lblStealth.Text     = String.Format("%d", heroStatistics.stats[Stats_Stealth]);
  lblLock.Text        = String.Format("%d", heroStatistics.stats[Stats_LockPicking]);  
  lblAllocate.Text    = String.Format("%d", pointsToAllocate);
  lblHonour.Text      = String.Format("%d", heroStatistics.honour);
  
  lblCharHealth.Text  = String.Format("Health:%d/%d",  heroStatistics.currentHealthPoints,  heroStatistics.maxHealthPoints);
  lblCharStamina.Text = String.Format("Stamina:%d/%d", heroStatistics.currentStaminaPoints, heroStatistics.maxStaminaPoints);
  lblCharMagic.Text   = String.Format("Magic:%d/%d",   heroStatistics.currentMagicPoints,   heroStatistics.maxMagicPoints);
}

function refreshHealthStaminaMagicLabels() {  
  heroStatistics.calculateMaxHealthStaminaAndMagic();
  heroStatistics.setHealthStaminaMagicPointsToMax();
  loadStatisticsToCharacterSheet();
}

function refreshStatisticsChanged() {
  if(heroStatistics.stats[Stats_Strength]     != heroStatisticsBuffer.stats[Stats_Strength])     lblStr.TextColor       = 14;
  if(heroStatistics.stats[Stats_Intelligence] != heroStatisticsBuffer.stats[Stats_Intelligence]) lblInt.TextColor       = 14;
  if(heroStatistics.stats[Stats_Agility]      != heroStatisticsBuffer.stats[Stats_Agility])      lblAgi.TextColor       = 14;
  if(heroStatistics.stats[Stats_Vitality]     != heroStatisticsBuffer.stats[Stats_Vitality])     lblVit.TextColor       = 14;
  if(heroStatistics.stats[Stats_Luck]         != heroStatisticsBuffer.stats[Stats_Luck])         lblLuck.TextColor      = 14;
  if(heroStatistics.stats[Stats_Magic]        != heroStatisticsBuffer.stats[Stats_Magic])        lblMagic.TextColor     = 14;  
  if(heroStatistics.stats[Stats_WeaponUse]    != heroStatisticsBuffer.stats[Stats_WeaponUse])    lblWeaponUse.TextColor = 14;
  if(heroStatistics.stats[Stats_Parry]        != heroStatisticsBuffer.stats[Stats_Parry])        lblParry.TextColor     = 14;
  if(heroStatistics.stats[Stats_Dodge]        != heroStatisticsBuffer.stats[Stats_Dodge])        lblDodge.TextColor     = 14;
  if(heroStatistics.stats[Stats_Throwing]     != heroStatisticsBuffer.stats[Stats_Throwing])     lblThrow.TextColor     = 14;
  if(heroStatistics.stats[Stats_Climbing]     != heroStatisticsBuffer.stats[Stats_Climbing])     lblClimb.TextColor     = 14;
  if(heroStatistics.stats[Stats_Stealth]      != heroStatisticsBuffer.stats[Stats_Stealth])      lblStealth.TextColor   = 14;
  if(heroStatistics.stats[Stats_LockPicking]  != heroStatisticsBuffer.stats[Stats_LockPicking])  lblAgi.TextColor       = 14;
  if(heroStatistics.honour                    != heroStatisticsBuffer.honour)                    lblHonour.TextColor    = 14;
}

function initializeCharacterSheet() {
  if(cEgo.Room == 101)                  // If create new character, overwrite values from heroStats init
    refreshHealthStaminaMagicLabels();
  else                                  // Else, check if stats have changed since last time GUI was open
    refreshStatisticsChanged();
  loadStatisticsToCharacterSheet();
  gCharsheet.Visible = true;
  gCharsheet2.Visible = true;
}

function deactiveStatisticsModifyButtons() {
  btnAddAgi.Visible       = false;
  btnAddClimb.Visible     = false;
  btnAddDodge.Visible     = false;
  btnAddInt.Visible       = false;
  btnAddLock.Visible      = false;
  btnAddLuck.Visible      = false;
  btnAddMagic.Visible     = false;
  btnAddParry.Visible     = false;
  btnAddStealth.Visible   = false;
  btnAddStr.Visible       = false;
  btnAddThrow.Visible     = false;
  btnAddVit.Visible       = false;
  btnAddWeaponUse.Visible = false;
  btnSubAgi.Visible       = false;
  btnSubClimb.Visible     = false;
  btnSubDodge.Visible     = false;
  btnSubInt.Visible       = false;
  btnSubLock.Visible      = false;
  btnSubLuck.Visible      = false;
  btnSubMagic.Visible     = false;
  btnSubParry.Visible     = false;
  btnSubStealth.Visible   = false;
  btnSubStr.Visible       = false;
  btnSubThrow.Visible     = false;
  btnSubVit.Visible       = false;
  btnSubWeaponUse.Visible = false;
  lblAllocate.Visible     = false;
  lblAllocateLbl.Visible  = false;
}

/**
 * Note that we add/subtract directly on the heroStatistics property since
 * its built in functions for modifying attributes are reserved for modification
 * on specific conditions.
 *
 * @param stat  - Which stat to increase/decrease. See enum Stats
 */
function increaseStat_Click(int stat) {
  if(pointsToAllocate > 0) {
    if(heroStatistics.stats[stat] == 0 && pointsToAllocate >= 15) {
      pointsToAllocate -= 15;
      heroStatistics.stats[stat] += 5;
    } else if(heroStatistics.stats[stat] != 0) {
      pointsToAllocate -= 5;
      heroStatistics.stats[stat] += 5;
    }
  }
  refreshHealthStaminaMagicLabels();
}
function decreaseStat_Click(int stat) { 
  if(heroStatistics.stats[stat] > heroStatisticsBuffer.stats[stat]) {
    short statBuffer = heroStatistics.stats[stat] - 5;
    if(statBuffer == 0)
      pointsToAllocate += 15;
    else
      pointsToAllocate += 5;
    heroStatistics.stats[stat] -= 5;
  }
  refreshHealthStaminaMagicLabels();
}

function addStr_Click()       { increaseStat_Click(Stats_Strength);     }
function addInt_Click()       { increaseStat_Click(Stats_Intelligence); }
function addAgi_Click()       { increaseStat_Click(Stats_Agility);      }
function addVit_Click()       { increaseStat_Click(Stats_Vitality);     }
function addLuck_Click()      { increaseStat_Click(Stats_Luck);         }
function addMagic_Click()     { increaseStat_Click(Stats_Magic);        }
function addWeaponUse_Click() { increaseStat_Click(Stats_WeaponUse);    }
function addParry_Click()     { increaseStat_Click(Stats_Parry);        }
function addDodge_Click()     { increaseStat_Click(Stats_Dodge);        }
function addThrow_Click()     { increaseStat_Click(Stats_Throwing);     }
function addClimb_Click()     { increaseStat_Click(Stats_Climbing);     }
function addStealth_Click()   { increaseStat_Click(Stats_Stealth);      }
function addLock_Click()      { increaseStat_Click(Stats_LockPicking);  }

function subStr_Click()       { decreaseStat_Click(Stats_Strength);     }
function subInt_Click()       { decreaseStat_Click(Stats_Intelligence); }
function subAgi_Click()       { decreaseStat_Click(Stats_Agility);      }
function subVit_Click()       { decreaseStat_Click(Stats_Vitality);     }
function subLuck_Click()      { decreaseStat_Click(Stats_Luck);         }
function subMagic_Click()     { decreaseStat_Click(Stats_Magic);        }
function subWeaponUse_Click() { decreaseStat_Click(Stats_WeaponUse);    }
function subParry_Click()     { decreaseStat_Click(Stats_Parry);        }
function subDodge_Click()     { decreaseStat_Click(Stats_Dodge);        }
function subThrow_Click()     { decreaseStat_Click(Stats_Throwing);     }
function subClimb_Click()     { decreaseStat_Click(Stats_Climbing);     }
function subStealth_Click()   { decreaseStat_Click(Stats_Stealth);      }
function subLock_Click()      { decreaseStat_Click(Stats_LockPicking);  }

function back_Click() {
  gCharsheet.Visible = false;
  gCharsheet2.Visible = false;
}

function start_Click() {  
  if(cEgo.Room == 101){
    String confirmMessage;
    if(pointsToAllocate > 0)
      confirmMessage = String.Format("%d points are still unallocated, do you still want to start the game?", pointsToAllocate);
    else
      confirmMessage = "Ready to start the game?";
	
    if(DialogBox(confirmMessage)) {    
      SetScreenTransition(eTransitionBoxout);
      player.ChangeRoom(9, 160,300);
      gIconbar.Visible = true;
      mouse.recallCursorModes();
      if (heroStatistics.class == CLASS_FIGHTER) {
        cEgo.AddInventory(iLongSword);
      } else if (heroStatistics.class == CLASS_MAGE) {
        cEgo.AddInventory(iDagger);
      } else if (heroStatistics.class == CLASS_THIEF) {
        cEgo.AddInventory(iDagger);
        cEgo.AddInventory(iDagger);
      } else {
        Display("Invalid hero class value. How did you manage that?!");
      }
      if(heroStatistics.stats[Stats_Magic] < 1) {
        lblTopBarMP.Visible = false;
        topBarMP.Visible = false;
        topBarMPContainer.Visible = false;
      } else {
        cSpellchar.AddInventory(iSpellFlame);
        cSpellchar.AddInventory(iSpellFetch);
        cSpellchar.AddInventory(iSpellDetect);
        cSpellchar.AddInventory(iSpellTrigger);
      }
      gCharsheet.Visible = false;
      gCharsheet2.Visible = false;
      deactiveStatisticsModifyButtons();
      copyStatisticsToBuffer();
      initTimeProcessing();
    }
	} else {
    lblStr.TextColor       = 15;
    lblInt.TextColor       = 15;
    lblAgi.TextColor       = 15;
    lblVit.TextColor       = 15;
    lblLuck.TextColor      = 15;
    lblMagic.TextColor     = 15;
    lblWeaponUse.TextColor = 15;
    lblParry.TextColor     = 15;
    lblDodge.TextColor     = 15;
    lblStealth.TextColor   = 15;
    lblLock.TextColor      = 15;
    lblClimb.TextColor     = 15;
    gCharsheet.Visible     = false;
    gCharsheet2.Visible    = false;
    mouse.reloadCursor();
    copyStatisticsToBuffer();
  }  
}

function reroll_Click() {
  if(DialogBox("Are you sure you want to reroll Hero?")) {
    initializeHeroStatistics(heroStatistics.name, heroStatistics.class);
    refreshHealthStaminaMagicLabels();
  }
}