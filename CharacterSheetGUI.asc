/*** AGS.gui.setStatsBtn   *****************************************************************************************************************/

function addStr_Click() {
	if (allocate > 0) {
		if (heroinfo.str == 0 && allocate >= 15) {
			heroinfo.str += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.str !=0) {
			heroinfo.str += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addInt_Click() {
	if (allocate > 0) {
		if (heroinfo.Int == 0 && allocate >= 15) {
			heroinfo.Int += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.Int !=0) {
			heroinfo.Int += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addAgi_Click() {
	if (allocate > 0) {
		if (heroinfo.agi == 0 && allocate >= 15) {
			heroinfo.agi += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.agi !=0) {
			heroinfo.agi += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();  
}

function addVit_Click() {
	if (allocate > 0) {
		if (heroinfo.vit == 0 && allocate >= 15) {
			heroinfo.vit += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.vit !=0) {
			heroinfo.vit += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addLuck_Click() {
	if (allocate > 0) {
		if (heroinfo.luck == 0 && allocate >= 15) {
			heroinfo.luck += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.luck !=0) {
			heroinfo.luck += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addMagic_Click() {
	if (allocate > 0) {
		if (heroinfo.magic == 0 && allocate >= 15) {
			heroinfo.magic += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.magic !=0) {
			heroinfo.magic += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addWeaponUse_Click() {
	if (allocate > 0) {
		if (heroinfo.weaponuse == 0 && allocate >= 15) {
			heroinfo.weaponuse += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.weaponuse !=0) {
			heroinfo.weaponuse += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addParry_Click() {
	if (allocate > 0) {
		if (heroinfo.parry == 0 && allocate >= 15) {
			heroinfo.parry += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.parry !=0) {
			heroinfo.parry += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();  
}

function addDodge_Click() {
	if (allocate > 0) {
		if (heroinfo.dodge == 0 && allocate >= 15) {
			heroinfo.dodge += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.dodge !=0) {
			heroinfo.dodge += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addThrow_Click() {
	if (allocate > 0) {
		if (heroinfo.throw == 0 && allocate >= 15) {
			heroinfo.throw += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.throw !=0) {
			heroinfo.throw += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addClimb_Click() {
	if (allocate > 0) {
		if (heroinfo.climb == 0 && allocate >= 15) {
			heroinfo.climb += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.climb !=0) {
			heroinfo.climb += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addStealth_Click() {
	if (allocate > 0) {
		if (heroinfo.stealth == 0 && allocate >= 15) {
			heroinfo.stealth += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.stealth !=0) {
			heroinfo.stealth += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function addLock_Click() {
	if (allocate > 0) {
		if (heroinfo.lockpick== 0 && allocate >= 15) {
			heroinfo.lockpick += 5;
			allocate = allocate - 15;	
		}
		else if (heroinfo.lockpick !=0) {
			heroinfo.lockpick += 5;
			allocate = allocate - 5;
		}
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
	}
	Update_stats();
}

function subStr_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.str;
  if (heroinfo.class == MAGE) buffer = mageData.str;
  if (heroinfo.class == THIEF) buffer = thiefData.str;
  
	if (heroinfo.str > buffer) {
		heroinfo.str -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.str == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();
}

function subInt_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.Int;
  if (heroinfo.class == MAGE) buffer = mageData.Int;
  if (heroinfo.class == THIEF) buffer = thiefData.Int;
  
	if (heroinfo.Int > buffer) {
		heroinfo.Int -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.Int == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subAgi_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.agi;
  if (heroinfo.class == MAGE) buffer = mageData.agi;
  if (heroinfo.class == THIEF) buffer = thiefData.agi;
  
	if (heroinfo.agi > buffer) {
		heroinfo.agi -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.agi == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subVit_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.vit;
  if (heroinfo.class == MAGE) buffer = mageData.vit;
  if (heroinfo.class == THIEF) buffer = thiefData.vit;
  
	if (heroinfo.vit > buffer) {
		heroinfo.vit -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.vit == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subLuck_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.luck;
  if (heroinfo.class == MAGE) buffer = mageData.luck;
  if (heroinfo.class == THIEF) buffer = thiefData.luck;
  
	if (heroinfo.luck > buffer) {
		heroinfo.luck -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.luck == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subMagic_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.magic;
  if (heroinfo.class == MAGE) buffer = mageData.magic;
  if (heroinfo.class == THIEF) buffer = thiefData.magic;
  
	if (heroinfo.magic > buffer) {
		heroinfo.magic -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.magic == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subWeaponUse_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.weaponuse;
  if (heroinfo.class == MAGE) buffer = mageData.weaponuse;
  if (heroinfo.class == THIEF) buffer = thiefData.weaponuse;
  
	if (heroinfo.weaponuse > buffer) {
		heroinfo.weaponuse -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.weaponuse == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subParry_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.parry;
  if (heroinfo.class == MAGE) buffer = mageData.parry;
  if (heroinfo.class == THIEF) buffer = thiefData.parry;
  
	if (heroinfo.parry > buffer) {
		heroinfo.parry -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.parry == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subDodge_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.dodge;
  if (heroinfo.class == MAGE) buffer = mageData.dodge;
  if (heroinfo.class == THIEF) buffer = thiefData.dodge;
  
	if (heroinfo.dodge > buffer) {
		heroinfo.dodge -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.dodge == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subThrow_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.throw;
  if (heroinfo.class == MAGE) buffer = mageData.throw;
  if (heroinfo.class == THIEF) buffer = thiefData.throw;
  
	if (heroinfo.throw > buffer) {
		heroinfo.throw -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.throw == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subClimb_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.climb;
  if (heroinfo.class == MAGE) buffer = mageData.climb;
  if (heroinfo.class == THIEF) buffer = thiefData.climb;
  
	if (heroinfo.climb > buffer) {
		heroinfo.climb -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.climb == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subStealth_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.stealth;
  if (heroinfo.class == MAGE) buffer = mageData.stealth;
  if (heroinfo.class == THIEF) buffer = thiefData.stealth;
  
	if (heroinfo.stealth > buffer) {
		heroinfo.stealth -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.stealth == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function subLock_Click() {
  short buffer;
  if (heroinfo.class == FIGHTER) buffer = fighterData.lockpick;
  if (heroinfo.class == MAGE) buffer = mageData.lockpick;
  if (heroinfo.class == THIEF) buffer = thiefData.lockpick;
  
	if (heroinfo.lockpick > buffer) {
		heroinfo.lockpick -= 5;  
		RefreshMaxHealthStat();
		RefreshMaxStaminaStat();
		RefreshMaxMagicStat();
		SetMaxHealth();
		SetMaxStamina();
		SetMaxMagic();
		if (heroinfo.lockpick == 0) allocate = allocate + 15;
		else allocate = allocate + 5;
	}
	Update_stats();  
}

function back_Click() {
  gCharsheet.Visible = false;
  gCharsheet2.Visible = false;
  allocate = 30;
}

function start_Click() {
  gCharsheet.Visible = false;
  gCharsheet2.Visible = false;
  //if (cEgo.Room == 101) {
    // char selection?
    SetScreenTransition(eTransitionBoxout);
		player.ChangeRoom(9, 160,300);
    gIconbar.Visible = true;
    recallCursorModes();  
    if (heroinfo.class == FIGHTER) cEgo.AddInventory(iLongSword);
    else if (heroinfo.class == MAGE) {
			cEgo.AddInventory(iDagger);
		}
	  else if (heroinfo.class == THIEF) {
	    cEgo.AddInventory(iDagger);
      cEgo.AddInventory(iDagger);
	  }
	  else {
	    Display("Invalid hero class value. How the hell did you manage that?!");
	  }
	  
  //}
  lblStr.TextColor = 15;
  lblInt.TextColor = 15;
  lblAgi.TextColor = 15;
  lblVit.TextColor = 15;
  lblLuck.TextColor = 15;
  lblMagic.TextColor = 15;
  lblWeaponUse.TextColor = 15;
  lblParry.TextColor = 15;
  lblDodge.TextColor = 15;
  lblStealth.TextColor = 15;
  lblLock.TextColor = 15;
  lblClimb.TextColor = 15;
  
}